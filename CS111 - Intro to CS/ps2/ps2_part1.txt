1) i. x / y = 5     // Integer division will produce a result with no decimal places. (Does not round: simply drops all decimal places.)
      x / z = 5.25  // Because z is of type double, the result will include decimal points, giving a more precise answer
  
  ii. x + y = 25       // This will add the values of the variables
      "x" + "y" = xy   // Because there are quotes around the x and y, they are read as strings, and string concatenation will occur
  
 iii. (int) (n / y * y) = 14  // Because the expression is in parentheses, it will be evaluated first,(Since y is type double, it will not preform integer division.) and then typecast it to (int), dropping all decimal places.
      (int) n / y * y = 12    // There is no parentheses n is typecast to int before any division takes place. Because all operands are of type int, integer division will take place and there will be no decimal places.
  
  iv. 11 + 1 + "cs" = 12cs    // Addition takes place from left to right, so it will add 11 and 1 together, and then preform string concatenation and add 12 and the string "cs" together.
      "cs" + 1 + 11 = cs111   // Since the first operand is a string, string concatenation will occur, and all operands will be treated as strings, putting togeter the string "cs", the string "11" and the character "1".


2) i. int a = 11 / 2;       // a = 5

  ii. double b = 11 / 2;    // b = 5

 iii. int c = 7.0;      // This will not compile because an int will not hold any value with decimal places. To correct the error, typecast the 7.0 to int type: int c = (int)7.0;
 
  iv. double d = 7;    // d = 7.0 becuase it is of type double (complier will add the decimal places automatically).
 

3) i. num = val + 10;
  
  ii. val = val * 3;
  
 iii. val = (num / 100);
 
  iv. val = (num / 100 % 10);
  

4) i. 1010 = 2e3 + 2e1 = 8 + 2 = 10
      101101 = 2e5 + 2e3 + 2e2 + 2e0 = 32 + 8 + 4 + 1 = 45
  
 ii. 35 = 32 + 2 + 1 = 2e5 + 2e1 + 2e0 = 100011
     71 = 64 + 4 + 2 + 1 = 2e6 + 2e2 + 2e1 + 2e0 = 1000111
  