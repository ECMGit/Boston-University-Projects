1. a. This method prints the first n letters of the alphabet backwards, then forwards.
    b. The method calls itself with a parameter of (n - 1) until n is less than or equal to 0.
    c. The base case is when n is less than or equal to zero.
    d. printSomething(4)
        |      print 'd'
        |      printSomething(3)
        |      |       print 'c'
        |      |       printSomething(2)
        |      |      |      print 'b'
        |      |      |      printSomething(1)
        |      |      |      |       print 'a'
        |      |      |      |       printSomething(0)
        |      |      |      |-------- return
        |      |      |     	 print 'a'
        |      |      |--------- return
        |      |             print 'b'
        |      |-------- return
        |      |       print 'c'	
        |--------- return
              print 'd'

2. a.
mystery(20, 6)
      return 2 + mystery(12, 6)
     |                        return 2 + mystery(6, 6)
     |                        |                    return 2 + mystery(0, 6)
     |                        |                   |                      return 2 + mystery(-6, 6)
     |                        |                   |                      |                    |- return 1
     |                        |                   |                      |-return 3
     |                        |                   |-return 5
     |                        |- return 7
     |- return 9

b. The answer is 9
c. There are 6 method stacks, including the main method.
d. There would be infinite recursion if a > 0 and b <= 0. The base case would never be be reached since each recursive call makes a larger.

3.
public static boolean includesZero(int[] arr, int i) {
     //base case
      if(i == arr.length - 1){
         return arr[i] == 0;
     }
  
      if(arr[i] == 0 || includesZero(arr, i+1) ){
         return true;
      }  
      else{
        return includesZero(arr, i+1);
     }
}