----------------------------------------------------------------
-- Computer Science 320 (Fall, 2009)
-- Concepts of Programming Languages
--
-- Assignment 7 Solutions
--   tests5.mhs

----------------------------------------------------------------
-- Test code for the Mini-Haskell interpreter.

----------------------------------------------------------------
-- Assignment 7, Problem 2, Part D

-- We can simply place a diverging expressing in a context
-- that should never be evaluated. Here, we place the Y
-- combinator applied to the identity function, a diverging
-- value, into five such contexts -- as the argument to a unit
-- lambda abstraction, as an argument to a function that
-- never uses its variable, as a definition for a let-bound
-- variable that is never used, and as an argument to
-- short-circuited (||) and (&&) operators.

-- This should evaluate to "False" under call-by-name
-- evaluation rules, and should diverge under call-by-value
-- evaluation rules.

-- This program will not type check under our type inference
-- algorithm because our algorithm cannot handle fixpoints.

let y = \f -> (\x -> f (x x)) (\x -> f (x x)) in
let id = \x -> x in
let inf = y id in
let x = inf in
  (\() -> (\x -> (\y -> 
    (&&) ((&&) False y) ((||) True y)) inf) inf) inf

--eof
